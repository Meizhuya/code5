结构体概念：用户自定义的数据类型

#include<iostream>
#include<string>
using namespace std;

//创建数据类型：学生（姓名 年龄 分数）
//语法：struct + 类型名称{  成员列表}
struct Student
{
	string name;

	int age;

	int score;

}s3;

//通过学生类型创建具体学生
int main()
{
	//2.1 struct Student s1
	struct Student s1;
	s1.name = "张三";
	s1.age = 18;
	s1.score = 100;

	cout << "姓名:" << s1.name <<  "年龄：" << s1.age <<  "分数：" << s1.score << endl;
	//2.2 struct Student s2 ={ , , ,}
	struct Student s2 = { "李四",19,80 };
	cout << "姓名:" << s2.name << "年龄：" << s2.age << "分数：" << s2.score << endl;

	//2.3

	s3.name = "王五";
	s3.age = 20;
	s3.score = 70;

	cout << "姓名:" << s3.name << "年龄：" << s3.age << "分数：" << s3.score << endl;



		system("pause");
		return 0;
	}
 
结构体数组


#include<iostream>
#include<string>
using namespace std;

//结构体数组
// 1.定义结构体
struct Student
{
	string name;

	int age;

	int score;

};

int main()
{
	//2.创建结构体数组
	struct Student stuArray[3] =
	{
		{"张三",18,100},
		{"李四",20,80},
		{"王五",19,65}

	};

	//3.给结构体数组中的元素赋值
	stuArray[2].name = "赵六";
	stuArray[1].age = 70;
	//4.遍历结构体数组
	for (int i = 0; i < 3; i++)
	{
		cout << "姓名：" << stuArray[i].name 
			<< "年龄：" << stuArray[i].age 
			<< "分数：" << stuArray[i].score << endl;
	}


	system("pause");
	return 0;
}


结构体指针
#include<iostream>
#include<string>
using namespace std;

//结构体指针
// 1.定义结构体
struct Student
{
	string name;

	int age;

	int score;

};

int main()
{
	//1.创结构体变量
	struct Student s = { "张三",18,100 };

	//2.通过指针指向结构体变量
	struct Student * p =  &s;
	//3.t通过指针访问结构体变量的数据
	cout << "姓名;" << p->name //用箭头访问
		<< "年龄：" << p->age
		<< "分数：" << p->score << endl;
	
	system("pause");
	return 0;
}
